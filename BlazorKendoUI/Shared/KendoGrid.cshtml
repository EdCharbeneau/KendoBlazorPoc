@using BlazorKendoUI
@using BlazorKendoUI.Models;
@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.JSInterop;
@using BlazorKendoUI.WebApp.Shared
@implements IDisposable

<div ref="element"></div>

@functions {
    private bool shouldRender = true;

    [Parameter]
    IEnumerable<object> Data { get; set; }

    [Parameter]
    bool Sortable { get; set; }

    [Parameter]
    List<GridColumn> Columns { get; set; }

    ElementRef element;

    [Parameter]
    Action OnGridBeforeEdit { get; set; }
    [JSInvokable]
    public void GridBeforeEdit() => OnGridBeforeEdit.Invoke();

    [Parameter]
    Action OnGridChange { get; set; }
    [JSInvokable]
    public void GridChange() => OnGridChange.Invoke();

    protected override Task OnParametersSetAsync()
    {
        this.UpdateGrid();

        return Task.CompletedTask;
    }

    protected override void OnAfterRender()
    {
        if (shouldRender)
        {
            KendoUIInterop.Init(element, GetModel(), this);

            shouldRender = false;
        }
    }

    public void Dispose()
    {
        KendoUIInterop.Dispose(element);
    }

    public void UpdateGrid()
    {
        KendoUIInterop.Update(element, GetModel());
    }

    private GridModel GetModel()
    {
        return new GridModel
        {
            Data = this.Data,
            Columns = this.Columns,
            Sortable = this.Sortable
        };
    }
}
