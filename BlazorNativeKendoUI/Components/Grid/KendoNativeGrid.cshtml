
<CascadingValue Value=this>
    @ChildContent
</CascadingValue>

<div class="@ClassToRender" style="height: 550px;">
    <KendoGridHeader Columns="Columns"></KendoGridHeader>
    <div class="k-grid-content k-auto-scrollable" style="height: 511px;">
        <table id="grid" data-role="grid" role="grid" style="height: auto;">
            <colgroup>
                @foreach (var item in Columns)
                {
                    <col>
                }
            </colgroup>
            <tbody role="rowgroup">
                @if (Data != null)
                {
                    @for (var i = 0; i < Data.Count(); i++)
                    {
                        var item = Data.ElementAt(i);
                        <tr role="row">
                            @if (RowTemplate != null)
                            {
                                @RowTemplate(item)
                            }
                            else
                            {
                                @foreach (var col in Columns)
                                {
                                    <td class="" role="gridcell">@item.GetType().GetProperty(col.Field).GetValue(item, null)</td>
                                }
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@functions {
    [Parameter]
    RenderFragment ChildContent { get; set; }

    [Parameter]
    string Class { get; set; }

    [Parameter]
    IEnumerable<object> Data { get; set; }

    protected string ClassToRender { get; set; }

    protected List<IGridColumn> Columns { get; set; } = new List<IGridColumn>();

    [Parameter]
    RenderFragment<object> RowTemplate { get; set; }

    protected override void OnInit()
    {
        base.OnInit();
    }

    protected override void OnParametersSet()
    {
        ClassToRender = (Class + " k-grid k-widget k-display-block").Trim();

        base.OnParametersSet();
    }

    public void AddColumn(IGridColumn column)
    {
        Columns.Add(column);
        StateHasChanged();
    }

    public void RemoveColumn(IGridColumn column)
    {
        Columns.Remove(column);
        StateHasChanged();
    }
}
