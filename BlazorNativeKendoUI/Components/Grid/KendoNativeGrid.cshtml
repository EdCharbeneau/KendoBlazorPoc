
<CascadingValue Value=this>
    @ChildContent
</CascadingValue>

<div class="@ClassToRender">
    <table>
        <colgroup>

            @foreach (var item in Columns)
            {
                <col>
            }
        </colgroup>
        <thead>
            <tr>
                @foreach (var item in Columns)
                {
                    <th>@item.Field</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (Data != null)
            {
                @foreach (var item in Data)
                {
                    <tr>
                        @foreach (var col in Columns)
                        {
                            <td>@item.GetType().GetProperty(col.Field).GetValue(item, null)</td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@functions {
    [Parameter]
    RenderFragment ChildContent { get; set; }

    [Parameter]
    string Class { get; set; }

    [Parameter]
    IEnumerable<object> Data { get; set; }

    protected string ClassToRender { get; set; }

    protected List<IGridColumn> Columns { get; set; } = new List<IGridColumn>();

    protected override void OnInit()
    {
        base.OnInit();
    }

    protected override void OnParametersSet()
    {
        ClassToRender = (Class + " k-grid k-widget k-display-block").Trim();

        base.OnParametersSet();
    }

    public void AddColumn(IGridColumn column)
    {
        Columns.Add(column);
        StateHasChanged();
    }

    public void RemoveColumn(IGridColumn column)
    {
        Columns.Remove(column);
        StateHasChanged();
    }
}
