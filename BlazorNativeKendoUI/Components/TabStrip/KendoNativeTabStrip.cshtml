<CascadingValue Value=this>
    <div class="k-widget k-header k-floatwrap k-tabstrip k-tabstrip-top">
        <ul class="k-tabstrip-items k-reset" role="tablist" tabindex="@selected">
            @ChildContent
        </ul>
        <div class="k-content k-state-active" style="display:block;">
            <div class="k-animation-container k-animation-container-relative" style="position: initial;">
                <div class="k-child-animation-container" style="transition-delay: 0ms;">
                    <div role="tabpanel" aria-expanded="true" id="0">
                        @ActiveTab?.ChildContent
                    </div>
                </div>
            </div>
        </div>
    </div>
</CascadingValue>

@functions {
[Parameter] protected RenderFragment ChildContent { get; set; }

[Parameter]
protected int Selected
{
    get
    {
        return selected.Value;
    }
    set
    {
        if (value >= 0 && value <= tabs.Count - 1)
        {
            SetActiveTab(tabs[value]);
        }
    }
}

[Parameter] protected Action<int> OnSelected { get; set; }

private int? selected;

private List<ITab> tabs = new List<ITab>();

public ITab ActiveTab { get; private set; }

public void AddTab(ITab tab)
{
    tabs.Add(tab);
    if (ActiveTab == null)
    {
        SetActiveTab(tab);
    }
}

public void RemoveTab(ITab tab)
{
    tabs.Remove(tab);
    if (ActiveTab == tab)
    {
        SetActiveTab(null);
    }
}

public void SetActiveTab(ITab tab)
{
    if (ActiveTab != tab)
    {
        ActiveTab = tab;
        selected = tabs.IndexOf(tab);
        OnSelected?.Invoke(selected.Value);
        StateHasChanged();
    }
}
}